set.seed(624333)
modRF <- train(y~., data=vowel.train, method='rf', prox=T)
set.seed(624333)
modRF <- train(y~., data=training, method='rf', prox=T)
modRF <- train(diagnosis~., data=training, method='rf', prox=T)
modBST <- train(diagnosis~., data=training, method='gbm')
modLDA <- train(diagnosis~., data=training, method='lda')
modLDA
modBST
modRF
predictions <- data.frame(actuals=training$diagnosis ,
RF=predict(modRF, testing),
BST=predict(modBST, testing),
LDA=predict(modLDA, testing),
)
predictions <- data.frame(actuals=training$diagnosis ,
RF=predict(modRF, testing),
BST=predict(modBST, testing),
LDA=predict(modLDA, testing)
)
predictions <- data.frame(actuals=testing$diagnosis ,
RF=predict(modRF, testing),
BST=predict(modBST, testing),
LDA=predict(modLDA, testing)
)
modRF <- train(actuals~., data=predictions, method='rf', prox=T)
modRF
modStackRF <- train(actuals~., data=predictions, method='rf', prox=T)
modRF <- train(diagnosis~., data=training, method='rf', prox=T)
predictions$stacked <- predict(modStackRF, testing)
predictions$stacked <- predict(modStackRF, testing)
library(randomForest)
predictions$stacked <- predict(modStackRF, testing)
predictions$stacked <- predict(modStackRF, testing)
traceback()
predictions$stacked <- predict(modStackRF, predictions)
predictions$RF.acc <- predictions$actual == predictions$RF
predictions$BST.acc <- predictions$actual == predictions$BST
predictions$LDA.acc <- predictions$actual == predictions$LDA
predictions$stacked.acc <- predictions$actual == predictions$stacked
with(predictions, sum(RF.acc) / length(RF.acc))
with(predictions, sum(BST.acc) / length(BST.acc))
with(predictions, sum(LDA.acc) / length(LDA.acc))
with(predictions, sum(stacked.acc) / length(stacked.acc))
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
modLASSO <- train(CompressiveStrength~., data=training, method='lasso')
mod
modLASSO
?plot.enet
plot.enet(modLASSO)
plot.enet(modLASSO,x=1:100)
plot.enet(modLASSO)
plot(modLASSO$glmnet.fit, "norm", label=TRUE)
modLASSO$finalModel
plot.enet(modLASSO$finalModel, xvar="penalty", use.color=T)
plot.enet(modLASSO$finalModel, xvar="penalty", use.color=T, label=T)
install.packages('e17017')
diag(c(1,2,3),3,3)
A <- matrix(data = c(0,-1,-1,0,0,0, -1,0,0,-1,0,-1, -1,0,0,-1,0,0
0,-1,-1,0,-1,0, 0,0,0,-1,0,-1, 0,-1,0,0,-1,0),
nrow=6)
A <- matrix(data=c(0,-1,-1,0,0,0, -1,0,0,-1,0,-1, -1,0,0,-1,0,0,
0,-1,-1,0,-1,0, 0,0,0,-1,0,-1, 0,-1,0,0,-1,0), nrow=6)
A
isSymmetric(A)
D <- diag(c(2,3,2,3,2,2),6)
L <- D - A
L
A <- matrix(data=c(0,1,1,0,0,0, 1,0,0,1,0,1, 1,0,0,1,0,0,
0,1,1,0,1,0, 0,0,0,1,0,1, 0,1,0,0,1,0), nrow=6)
D <- diag(c(2,3,2,3,2,2),6)
L <- D - A
L
eigen(L)
eigen?
?eigen
eigL <- eigen(L)
eig2 <- eigL$values[-2]
eig2
eigL$values
eig2 <- eigL$values[-2:-2]
eig2
eig2 <- eigL$values[length(eigL$values)-2]
eig2
next2last <- length(eigL$values)-2
eig2 <- eigL$values[next2last]
eigvect2 <- eigL$vectors[,next2last]
eigvect2
next2last <- length(eigL$values)-1
eigval2 <- eigL$values[next2last]
eigvect2 <- eigL$vectors[,next2last]
eigL
eigvect2
t(eigvect2)
eigL[,5]
eigL$vectors[,5]
eigL$vectors[,5:]
eigL$vectors[,5:6]
5*113
75*9
75*7
75*5
mean(825,675,375)
mean(c(825,675,375))
mean(c(825,675,37))
mean(c(675,375,375))
mean(c(675,975,525))
mean(c(1125,75,525))
library(shiny)
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
shiny::runApp('Google Drive/Programming/R/CapiTool/CapiTool App')
getwd()
setwd("Google Drive/Programming/R/CapiTool/")
getwd()
k.vivo <- read.csv("data/k_vivo.csv")
k.moroso <- read.csv("data/k_moroso.csv")
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
?hr()
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
?sliderInput
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
sample(1:10,1)
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
debug()
shiny::runApp('CapiTool App')
dim(perf.cap)
length(perf.cap)
dim(perf.cap[1])
length(perf.cap[1])
perf.cap[1]
head(perf.cap[1])
head(k.vivo)
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
View(simulation)
View(k.m.2014)
View(k.moroso)
sum(k.moroso$IND_MOR)
sum(k.moroso$IND_MOR, by=k.moroso$PRODUCTO)
tapply(k.moroso$PD_TTC, k.moroso$PRODUCTO, sum)
tapply(k.moroso$PD_TTC, k.moroso$PRODUCTO, sum) * .08
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
View(simulation)
rep(c(2,3),4)
shiny::runApp('CapiTool App')
View(k.moroso)
unique(k.moroso$PRODUCTO)
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
unique(k.moroso$PRODUCTO)
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
k.moroso$VENTAS_CAT %in% c("(100, 250]","<= 100")
k.moroso[!k.moroso$VENTAS_CAT %in% c("(100, 250]","<= 100"),]
sapply(c("2014", 2015), as.numeric)
sapply(c(2014, 2015), as.character)
c("Now", sapply(c(2014, 2015), as.character) )
get.k.vivo(k.vivo, breakdown=T)
names(get.k.vivo(k.vivo, breakdown=T))
names(get.k.mororo(k.vivo, breakdown=T))
names(get.k.moroso(k.vivo, breakdown=T))
names(get.k.moroso(k.moroso, breakdown=T))
shiny::runApp('CapiTool App')
?reactive
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
dim(data)
data
shiny::runApp('CapiTool App')
data
View(data)
data
macroRead()
m <- macroRead()
m
shiny::runApp('CapiTool App')
m <- macroRead()
m
m <- macroRead()
m
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
k.vivo.raw <- read.csv("../data/k_vivo.csv")
shiny::runApp('CapiTool App')
dim(k.vivo.raw)
k <- subset(k.vivo.raw, PRODUCTO != "Guarantee")
unique(k$PRODUCTO)
ls()
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
windorF
data
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
data
simu
window
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
get.k.vivo(k.vivo, breakdown=T)
c("Now")*8
rep("Now",8)
rep(c(1,2),4)
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
data
simu
get.k.vivo(k.v.2017)
shiny::runApp('CapiTool App')
k.v.2015
summary(k.v.vivo)
summary(k.v.2015)
head(k.vivo)
head(get.PD(k.vivo))
MACRO
macroRead()
m <- macroRead()
m
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
rep("now", 8)
length(rep("now",8))
shiny::runApp('CapiTool App')
got.vivo
get.k.moroso(k.moroso, breakdown=T)
table(k.moroso.raw$PRODUCTO)
getwd()
k.moroso2 <- read.csv("data/k_moroso.csv")
table(k.moroso2$PRODUCTO)
colnames(k.moroso2)
write.csv(k.moroso, "data/k.moroso_final.csv")
k.moroso2 <- read.csv("data/k_moroso_final.csv")
k.moroso2 <- read.csv("data/k_moroso_final.csv")
table(k.moroso2$PRODUCTO)
table(k.moroso$PRODUCTO)
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
names(simu.prods)
dim(simu.prods)
simu.prods
get.k.vivo(k.v.2017)
get.k.vivo(k.v.2017, breakdown=T)
get.k.vivo(k.v.2016, breakdown=T)
get.k.vivo(k.v.2015, breakdown=T)
get.k.moroso(k.m.2015, breakdown=T)
get.k.moroso(k.m.2016, breakdown=T)
get.k.moroso(k.m.2017, breakdown=T)
get.k.moroso(k.moroso, breakdown=T)
head(get.PD(k.moroso,MACRO))
pd <- get.PD(k.moroso,MACRO)
lgd2015 <- get.LGD(pd,MACRO)
head(lgd2015)
get.k.moroso(lgd2015)
get.k.moroso(lgd2015,breakdown=T)
lgd2015$Impairment <- with(lgd2015, LGD_STD * EAD_STD)
head( lgd2015$Impairment)
summary( lgd2015$Impairment)
lgd2015$ELbe <- with(lgd2015,Impairment/EXPOSURE)
summary( lgd2015$ELbe)
lgd2015$RW <- with(lgd2015,LGD_DT - ELbe)
summary( lgd2015$RW)
MACRO <- c(4,4,4,4,4)
lgd2015 <- get.LGD(pd,MACRO)
get.k.moroso(lgd2015,breakdown=T)
lgd2015 <- get.LGD(pd,MACRO)
shiny::runApp('CapiTool App')
traceback()
traceback()
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
simuP
shiny::runApp('CapiTool App')
simuP
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
library(devtools)
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='willahscott', token='310BC30921B2A619CACF7C4F6A71A3AA', secret='kSzEBSTYClTNOJxE3xETjWvsLMu5nSx83Zk7pqsU')
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
rownames(k.moroso)
rownames(k.vivo)
shiny::runApp('CapiTool App')
k.vivo <- read.csv("data/k_vivo.csv")
getwd()
k.vivo <- read.csv("CapiTool App/data/k_vivo.csv")
shiny::runApp('CapiTool App')
View(k.vivo)
shiny::runApp('CapiTool App')
View(k.moroso)
View(k.vivo)
summary(k.vivo)
summary(k.moroso)
shiny::runApp('CapiTool App')
summary(k.moroso)
shiny::runApp('CapiTool App')
summary(k.moroso)
shiny::runApp('CapiTool App')
summary(k.moroso)
k.vivo <- read.csv("original data/k_vivo_orig.csv")
View(k.vivo)
View(k.vivo)
View(k.vivo)
names(k.vivo)
k.vivo2 <- k.vivo[,-(2:3)]
View(k.vivo2)
k.moroso <- read.csv("original data/k_moroso_orig.csv")
k.moroso2 <- k.moroso[,-(2:3)]
View(k.moroso2)
View(k.moroso2)
View(k.moroso)
write.csv(k.moroso2,"k_moroso.csv")
write.csv(k.vivo2,"k_vivo.csv")
shiny::runApp('CapiTool App')
shiny::runApp('CapiTool App')
View(k.moroso)
k.moroso <- read.csv("original data/k_moroso_orig.csv")
k.moroso2 <- k.moroso[,-(2:3)]
View(k.moroso2)
write.csv(k.moroso2,"k_moroso.csv")
mm <- read.csv("k_moroso.csv")
View(mm)
shiny::runApp('CapiTool App')
get.k.vivo(k.vivo,T)
v <- read.csv("CapiTool App/data/k_vivo.csv")
unique(v$PRODUCTO)
v$PRODUCTO2 <- v$PRODUCTO
v$PRODUCTO[v$PRODUCTO == "HIPOTECA"] <- "Mortgage"
View(v)
mm <- read.csv("CapiTool App/data/k_moroso.csv")
mm2 <- subset(mm, PRODUCTO != "AVAL")
View(mm2)
mm3 <- mm[,-(1:2)]
names(mm3)
View(mm3)
View(mm)
write.csv(mm3,"k_moroso2.csv")
mm4 <- read.csv("k_moroso2.csv")
View(mm4)
v <- read.csv("CapiTool App/data/k_vivo (1).csv")
View(v)
shiny::runApp('CapiTool App')
unique(k.moroso$PRODUCTO)
View(k.moroso)
subset(k.moroso, PRODUCTO == "AVAL")
km <- subset(k.moroso, PRODUCTO != "AVAL")
write.csv(km,"CapiTool App/data/k_moroso.csv")
k.moroso <- read.csv("data/k_moroso.csv")
k.moroso <- read.csv("CapiTool App/data/k_moroso[Conflicto].csv")
unique(k.moroso$PRODUCTO)
km <- read.csv("CapiTool App/data/k_moroso.csv")
unique(km$PRODUCTO)
View(km)
km2 <- km[,-(1:2)]
write.csv(km2,"CapiTool App/data/k_moroso.csv")
vv <- read.csv("CapiTool App/data/k_vivo.csv")
mm <- read.csv("CapiTool App/data/k_moroso.csv")
View(mm)
View(vv)
shiny::runApp('CapiTool App')
library(shiny)
runApp()
setwd("CapiTool App/")
runApp()
library(shinyapps)
deployApp()
setwd("../")
setwd("CapiToolApp/")
deployApp()
